apiVersion: v1
kind: ConfigMap
metadata:
  name: nodejs-backend-environment
  namespace: ${NAMESPACE}
data:
  MONGODB_URL: ${MONGODB_URL}
  JWT_SECRET: ${JWT_SECRET}
  JWT_ACCESS_EXPIRATION_MINUTES: ${JWT_ACCESS_EXPIRATION_MINUTES}
  JWT_REFRESH_EXPIRATION_DAYS: ${JWT_REFRESH_EXPIRATION_DAYS}
  JWT_RESET_PASSWORD_EXPIRATION_MINUTES: ${JWT_RESET_PASSWORD_EXPIRATION_MINUTES}
  JWT_VERIFY_EMAIL_EXPIRATION_MINUTES: ${JWT_VERIFY_EMAIL_EXPIRATION_MINUTES}
  SMTP_HOST: ${SMTP_HOST}
  SMTP_PORT: ${SMTP_PORT}
  SMTP_USERNAME: ${SMTP_USERNAME}
  SMTP_PASSWORD: ${SMTP_PASSWORD}
  EMAIL_FROM: ${EMAIL_FROM}
immutable: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-backend
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs-backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nodejs-backend
    spec:
      containers:
      - name: nodejs-backend
        image: dhanifajar15/nodejs-backend:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
          - containerPort: 3000
        envFrom:
        - configMapRef:
            name: nodejs-backend-environment
        resources:
          requests:
            memory: "500Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-backend
  namespace: ${NAMESPACE}
spec:
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: nodejs-backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nodejs-backend-ingress
  namespace: ${NAMESPACE}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - secretName: dhani-cloud-tls
  rules:
  - host:  ${INGRESS_HOST}
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: nodejs-backend
            port:
              number: 80
